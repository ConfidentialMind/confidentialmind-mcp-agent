version: "3.8"

services:
  # PostgreSQL database for conversation history
  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=agents
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  # PostgreSQL MCP Server
  postgres-mcp:
    build:
      context: .
      dockerfile: docker/postgres-mcp.Dockerfile
    environment:
      - PG_CONNECTION_STRING=${PG_CONNECTION_STRING}
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RAG MCP Server
  rag-mcp:
    build:
      context: .
      dockerfile: docker/rag-mcp.Dockerfile
    environment:
      - RAG_API_URL=${RAG_API_URL}
      - RAG_API_KEY=${RAG_API_KEY}
    ports:
      - "8002:8002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Obsidian MCP Server
  obsidian-mcp:
    build:
      context: .
      dockerfile: docker/obsidian-mcp.Dockerfile
    environment:
      - OBSIDIAN_VAULT_PATH=/app/vault
    volumes:
      - ${OBSIDIAN_VAULT_PATH:-./vault}:/app/vault
    ports:
      - "8003:8003"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Agent API Service
  agent-api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/agents
      - LLM_URL=${LLM_URL}
      - LLM_API_KEY=${LLM_API_KEY}
      - PG_MCP_URL=http://postgres-mcp:8001
      - RAG_MCP_URL=http://rag-mcp:8002
      - OBSIDIAN_MCP_URL=http://obsidian-mcp:8003
      - SERVICE_NAME=cm-agent-api
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      postgres-mcp:
        condition: service_healthy
      rag-mcp:
        condition: service_healthy
      obsidian-mcp:
        condition: service_healthy

volumes:
  pgdata:
